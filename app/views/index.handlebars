

  <h1>{{title }}</h1>
  <p>Welcome to {{title }}</p>


<p>Welcome to </p>

<style>

body {
  font: 10px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.x.axis path {
  display: none;
}

.line {
  fill: none;
  stroke: steelblue;
  stroke-width: 1.5px;
}

</style>
<script   src="https://code.jquery.com/jquery-2.2.1.min.js"   integrity="sha256-gvQgAFzTH6trSrAWoH1iPo9Xc96QxSZ3feW6kem+O00="   crossorigin="anonymous"></script>
<script src="//d3js.org/d3.v3.min.js"></script>
<script>
$.get('/uptime', function(data,err) {
  console.log('hello, you got something')
  console.log(data)
  var margin = {top: 20, right: 20, bottom: 30, left: 50},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var formatDate = d3.time.format("%d-%b-%y");

var x = d3.time.scale()
    .range([0, width]);

var y = d3.scale.linear()
    .range([height, 0]);

// var xAxis = d3.svg.axis()
//     .scale(x)
//     .orient("bottom");

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");

var line = d3.svg.line()
    .x(function(d) { return x(new Date(d.created_at)); })
    .y(function(d) { return y(parseFloat(d.value)); });

var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var axis = svg.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + height + ")")
    .call(x.axis = d3.svg.axis().scale(x).orient("bottom"));
// d3.json([{{uptimes}}], function(error, data) {
  // if (error) throw error;

  x.domain(d3.extent(data, function(d) { return new Date(d.created_at); }));
  y.domain(d3.extent(data, function(d) { return parseFloat(d.value) ; }));

  // svg.append("g")
  //     .attr("class", "x axis")
  //     .attr("transform", "translate(0," + height + ")")
  //     .call(axis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Load Avg");

  var path = svg.append("path")
      .datum(data)
      .attr("class", "line")
      .attr("d", line);
// });

function type(d) {
  d.date = formatDate.parse(d.date);
  d.close = +d.close;
  return d;
}

function poll(fn, callback, errback, timeout, interval) {
    var endTime = Number(new Date()) + (timeout || 2000);
    interval = interval || 100;

    (function p() {
            // If the condition is met, we're done!
            if(fn()) {
                callback();
            }
            // If the condition isn't met but the timeout hasn't elapsed, go again
            // else if (Number(new Date()) < endTime) {

            // }
            // Didn't match and too much time, reject!
            else {
                errback(new Error('timed out for ' + fn + ': ' + arguments));
            }
            setTimeout(p, interval);
    })();
}

// Usage:  ensure element is visible
poll(
    function() {
        $.get('/uptime', function(newData,err) {
           console.log('!!! ', newData[0]);

           path.attr("d", line)
            .attr("transform", null)
            .transition()

            var n = 243,
    duration = 750,
    // now = new Date(Date.now() - duration),
    count = 0,
            now = new Date();
            x.domain([now - (n - 2) * duration, now - duration]);
    y.domain([0, d3.max(data.map(function(item){return parseFloat(item.value)}))]);

    // push the accumulated count onto the back, and reset the count
    data.push(newData[0]);
    count = 0;

    // redraw the line
    svg.select(".line")
        .attr("d", line)
        .attr("transform", null);

    // slide the x-axis left
    axis.call(x.axis);

    // slide the line left
    path.transition()
        .attr("transform", "translate(" + x(now - (n - 1) * duration) + ")");

    // pop the old data point off the front
    // scrollData.shift();
            // .attr("transform", "translate(" + x(-1) + ")");
            data.shift();
        });
    },
    function() {
        // Done, success callback
    },
    function() {
        // Error, failure callback
    }
, null, 10000);

});

</script>
